{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\n/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\nimport PhoneNumber from './PhoneNumber.js';\nimport { MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE, VALID_PUNCTUATION } from './constants.js';\nimport createExtensionPattern from './helpers/extension/createExtensionPattern.js';\nimport RegExpCache from './findNumbers/RegExpCache.js';\nimport { limit, trimAfterFirstMatch } from './findNumbers/util.js';\nimport { _pL, _pN, pZ, PZ, pNd } from './findNumbers/utf-8.js';\nimport Leniency from './findNumbers/Leniency.js';\nimport parsePreCandidate from './findNumbers/parsePreCandidate.js';\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate.js';\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate.js';\nimport { isSupportedCountry } from './metadata.js';\nimport parseNumber from './parse_.js';\nvar EXTN_PATTERNS_FOR_MATCHING = createExtensionPattern('matching');\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\n\nvar INNER_MATCHES = [\n// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\n'\\\\/+(.*)/',\n// Note that the bracket here is inside the capturing group, since we consider it part of the\n// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\n'(\\\\([^(]*)',\n// Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\n// We require a space on either side of the hyphen for it to be considered a separator.\n\"(?:\".concat(pZ, \"-|-\").concat(pZ, \")\").concat(pZ, \"*(.+)\"),\n// Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\n// possible that it's supposed to be used to break two numbers without spaces, and we haven't\n// seen many instances of it used within a number.\n\"[\\u2012-\\u2015\\uFF0D]\".concat(pZ, \"*(.+)\"),\n// Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\n\"\\\\.+\".concat(pZ, \"*([^.]+)\"),\n// Breaks on space - e.g. \"3324451234 8002341234\"\n\"\".concat(pZ, \"+(\").concat(PZ, \"+)\")]; // Limit on the number of leading (plus) characters.\n\nvar leadLimit = limit(0, 2); // Limit on the number of consecutive punctuation characters.\n\nvar punctuationLimit = limit(0, 4);\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\n\nvar digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE; // Limit on the number of blocks separated by punctuation.\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\n\nvar blockLimit = limit(0, digitBlockLimit);\n/* A punctuation sequence allowing white space. */\n\nvar punctuation = \"[\".concat(VALID_PUNCTUATION, \"]\") + punctuationLimit; // A digits block without punctuation.\n\nvar digitSequence = pNd + limit(1, digitBlockLimit);\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\n\nvar PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit + digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit + '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?'; // Regular expression of trailing characters that we want to remove.\n// We remove all characters that are not alpha or numerical characters.\n// The hash character is retained here, as it may signify\n// the previous block was an extension.\n//\n// // Don't know what does '&&' mean here.\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\n//\n\nvar UNWANTED_END_CHAR_PATTERN = new RegExp(\"[^\".concat(_pN).concat(_pL, \"#]+$\"));\nvar NON_DIGITS_PATTERN = /(\\D+)/;\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\n\nvar PhoneNumberMatcher = /*#__PURE__*/function () {\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\n  function PhoneNumberMatcher() {\n    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var metadata = arguments.length > 2 ? arguments[2] : undefined;\n    _classCallCheck(this, PhoneNumberMatcher);\n    options = _objectSpread(_objectSpread({}, options), {}, {\n      defaultCallingCode: options.defaultCallingCode,\n      defaultCountry: options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\n      leniency: options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\n      maxTries: options.maxTries || MAX_SAFE_INTEGER\n    });\n    if (!options.leniency) {\n      throw new TypeError('`Leniency` not supplied');\n    }\n    if (options.maxTries < 0) {\n      throw new TypeError('`maxTries` not supplied');\n    }\n    this.text = text;\n    this.options = options;\n    this.metadata = metadata;\n    /** The degree of validation requested. */\n\n    this.leniency = Leniency[options.leniency];\n    if (!this.leniency) {\n      throw new TypeError(\"Unknown leniency: \".concat(options.leniency, \".\"));\n    }\n    /** The maximum number of retries after matching an invalid number. */\n\n    this.maxTries = options.maxTries;\n    this.PATTERN = new RegExp(PATTERN, 'ig');\n    /** The iteration tristate. */\n\n    this.state = 'NOT_READY';\n    /** The next index to start searching at. Undefined in {@link State#DONE}. */\n\n    this.searchIndex = 0; // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n    // countries being used for the same doc with ~10 patterns for each country. Some pages will have\n    // a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n    // that use-case won't have a lot of benefit.\n\n    this.regExpCache = new RegExpCache(32);\n  }\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\n\n  _createClass(PhoneNumberMatcher, [{\n    key: \"find\",\n    value: function find() {\n      // // Reset the regular expression.\n      // this.PATTERN.lastIndex = index\n      var matches;\n      while (this.maxTries > 0 && (matches = this.PATTERN.exec(this.text)) !== null) {\n        var candidate = matches[0];\n        var offset = matches.index;\n        candidate = parsePreCandidate(candidate);\n        if (isValidPreCandidate(candidate, offset, this.text)) {\n          var match =\n          // Try to come up with a valid match given the entire candidate.\n          this.parseAndVerify(candidate, offset, this.text) // If that failed, try to find an \"inner match\" -\n          // there might be a phone number within this candidate.\n          || this.extractInnerMatch(candidate, offset, this.text);\n          if (match) {\n            if (this.options.v2) {\n              var phoneNumber = new PhoneNumber(match.country || match.countryCallingCode, match.phone, this.metadata);\n              if (match.ext) {\n                phoneNumber.ext = match.ext;\n              }\n              return {\n                startsAt: match.startsAt,\n                endsAt: match.endsAt,\n                number: phoneNumber\n              };\n            }\n            return match;\n          }\n        }\n        this.maxTries--;\n      }\n    }\n    /**\r\n     * Attempts to extract a match from `substring`\r\n     * if the substring itself does not qualify as a match.\r\n     */\n  }, {\n    key: \"extractInnerMatch\",\n    value: function extractInnerMatch(substring, offset, text) {\n      for (var _iterator = _createForOfIteratorHelperLoose(INNER_MATCHES), _step; !(_step = _iterator()).done;) {\n        var innerMatchPattern = _step.value;\n        var isFirstMatch = true;\n        var candidateMatch = void 0;\n        var innerMatchRegExp = new RegExp(innerMatchPattern, 'g');\n        while (this.maxTries > 0 && (candidateMatch = innerMatchRegExp.exec(substring)) !== null) {\n          if (isFirstMatch) {\n            // We should handle any group before this one too.\n            var _candidate = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, substring.slice(0, candidateMatch.index));\n            var _match = this.parseAndVerify(_candidate, offset, text);\n            if (_match) {\n              return _match;\n            }\n            this.maxTries--;\n            isFirstMatch = false;\n          }\n          var candidate = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, candidateMatch[1]); // Java code does `groupMatcher.start(1)` here,\n          // but there's no way in javascript to get a `candidate` start index,\n          // therefore resort to using this kind of an approximation.\n          // (`groupMatcher` is called `candidateInSubstringMatch` in this javascript port)\n          // https://stackoverflow.com/questions/15934353/get-index-of-each-capture-in-a-javascript-regex\n\n          var candidateIndexGuess = substring.indexOf(candidate, candidateMatch.index);\n          var match = this.parseAndVerify(candidate, offset + candidateIndexGuess, text);\n          if (match) {\n            return match;\n          }\n          this.maxTries--;\n        }\n      }\n    }\n    /**\r\n     * Parses a phone number from the `candidate` using `parseNumber` and\r\n     * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n     * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n     *\r\n     * @param candidate  the candidate match\r\n     * @param offset  the offset of {@code candidate} within {@link #text}\r\n     * @return  the parsed and validated phone number match, or null\r\n     */\n  }, {\n    key: \"parseAndVerify\",\n    value: function parseAndVerify(candidate, offset, text) {\n      if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\n        return;\n      }\n      var number = parseNumber(candidate, {\n        extended: true,\n        defaultCountry: this.options.defaultCountry,\n        defaultCallingCode: this.options.defaultCallingCode\n      }, this.metadata);\n      if (!number.possible) {\n        return;\n      }\n      if (this.leniency(number, candidate, this.metadata, this.regExpCache)) {\n        // // We used parseAndKeepRawInput to create this number,\n        // // but for now we don't return the extra values parsed.\n        // // TODO: stop clearing all values here and switch all users over\n        // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\n        // number.clearCountryCodeSource()\n        // number.clearRawInput()\n        // number.clearPreferredDomesticCarrierCode()\n        var result = {\n          startsAt: offset,\n          endsAt: offset + candidate.length,\n          phone: number.phone\n        };\n        if (number.country && number.country !== '001') {\n          result.country = number.country;\n        } else {\n          result.countryCallingCode = number.countryCallingCode;\n        }\n        if (number.ext) {\n          result.ext = number.ext;\n        }\n        return result;\n      }\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      if (this.state === 'NOT_READY') {\n        this.lastMatch = this.find(); // (this.searchIndex)\n\n        if (this.lastMatch) {\n          // this.searchIndex = this.lastMatch.endsAt\n          this.state = 'READY';\n        } else {\n          this.state = 'DONE';\n        }\n      }\n      return this.state === 'READY';\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      // Check the state and find the next match as a side-effect if necessary.\n      if (!this.hasNext()) {\n        throw new Error('No next element');\n      } // Don't retain that memory any longer than necessary.\n\n      var result = this.lastMatch;\n      this.lastMatch = null;\n      this.state = 'NOT_READY';\n      return result;\n    }\n  }]);\n  return PhoneNumberMatcher;\n}();\nexport { PhoneNumberMatcher as default };","map":{"version":3,"sources":["../source/PhoneNumberMatcher.js"],"names":["PhoneNumber","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_PUNCTUATION","createExtensionPattern","RegExpCache","limit","trimAfterFirstMatch","_pL","_pN","pZ","PZ","pNd","Leniency","parsePreCandidate","isValidPreCandidate","isValidCandidate","LEAD_CLASS","isSupportedCountry","parseNumber","EXTN_PATTERNS_FOR_MATCHING","INNER_MATCHES","leadLimit","punctuationLimit","digitBlockLimit","blockLimit","punctuation","digitSequence","PATTERN","UNWANTED_END_CHAR_PATTERN","RegExp","NON_DIGITS_PATTERN","MAX_SAFE_INTEGER","Number","Math","pow","PhoneNumberMatcher","text","options","metadata","defaultCallingCode","defaultCountry","undefined","leniency","extended","maxTries","TypeError","state","searchIndex","regExpCache","matches","exec","candidate","offset","index","match","parseAndVerify","extractInnerMatch","v2","phoneNumber","country","countryCallingCode","phone","ext","startsAt","endsAt","number","substring","innerMatchPattern","isFirstMatch","candidateMatch","innerMatchRegExp","slice","candidateIndexGuess","indexOf","possible","result","length","lastMatch","find","hasNext","Error"],"mappings":"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","sourcesContent":["/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\r\n\r\nimport PhoneNumber from './PhoneNumber.js'\r\n\r\nimport {\r\n  MAX_LENGTH_FOR_NSN,\r\n  MAX_LENGTH_COUNTRY_CODE,\r\n  VALID_PUNCTUATION\r\n} from './constants.js'\r\n\r\nimport createExtensionPattern from './helpers/extension/createExtensionPattern.js'\r\n\r\nimport RegExpCache from './findNumbers/RegExpCache.js'\r\n\r\nimport {\r\n\tlimit,\r\n\ttrimAfterFirstMatch\r\n} from './findNumbers/util.js'\r\n\r\nimport {\r\n\t_pL,\r\n\t_pN,\r\n\tpZ,\r\n\tPZ,\r\n\tpNd\r\n} from './findNumbers/utf-8.js'\r\n\r\nimport Leniency from './findNumbers/Leniency.js'\r\nimport parsePreCandidate from './findNumbers/parsePreCandidate.js'\r\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate.js'\r\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate.js'\r\n\r\nimport { isSupportedCountry } from './metadata.js'\r\n\r\nimport parseNumber from './parse_.js'\r\n\r\nconst EXTN_PATTERNS_FOR_MATCHING = createExtensionPattern('matching')\r\n\r\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\r\nconst INNER_MATCHES =\r\n[\r\n\t// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\r\n\t'\\\\/+(.*)/',\r\n\r\n\t// Note that the bracket here is inside the capturing group, since we consider it part of the\r\n\t// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\r\n\t'(\\\\([^(]*)',\r\n\r\n\t// Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\r\n\t// We require a space on either side of the hyphen for it to be considered a separator.\r\n\t`(?:${pZ}-|-${pZ})${pZ}*(.+)`,\r\n\r\n\t// Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\r\n\t// possible that it's supposed to be used to break two numbers without spaces, and we haven't\r\n\t// seen many instances of it used within a number.\r\n\t`[\\u2012-\\u2015\\uFF0D]${pZ}*(.+)`,\r\n\r\n\t// Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\r\n\t`\\\\.+${pZ}*([^.]+)`,\r\n\r\n\t// Breaks on space - e.g. \"3324451234 8002341234\"\r\n\t`${pZ}+(${PZ}+)`\r\n]\r\n\r\n// Limit on the number of leading (plus) characters.\r\nconst leadLimit = limit(0, 2)\r\n\r\n// Limit on the number of consecutive punctuation characters.\r\nconst punctuationLimit = limit(0, 4)\r\n\r\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\r\nconst digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE\r\n\r\n// Limit on the number of blocks separated by punctuation.\r\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\r\nconst blockLimit = limit(0, digitBlockLimit)\r\n\r\n/* A punctuation sequence allowing white space. */\r\nconst punctuation = `[${VALID_PUNCTUATION}]` + punctuationLimit\r\n\r\n// A digits block without punctuation.\r\nconst digitSequence = pNd + limit(1, digitBlockLimit)\r\n\r\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\r\nconst PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit\r\n\t+ digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit\r\n\t+ '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?'\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\n// We remove all characters that are not alpha or numerical characters.\r\n// The hash character is retained here, as it may signify\r\n// the previous block was an extension.\r\n//\r\n// // Don't know what does '&&' mean here.\r\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\r\n//\r\nconst UNWANTED_END_CHAR_PATTERN = new RegExp(`[^${_pN}${_pL}#]+$`)\r\n\r\nconst NON_DIGITS_PATTERN = /(\\D+)/\r\n\r\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1\r\n\r\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\r\nexport default class PhoneNumberMatcher\r\n{\r\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\r\n  constructor(text = '', options = {}, metadata)\r\n  {\r\n    options = {\r\n      ...options,\r\n      defaultCallingCode: options.defaultCallingCode,\r\n      defaultCountry: options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\r\n      leniency: options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\r\n      maxTries: options.maxTries || MAX_SAFE_INTEGER\r\n    }\r\n\r\n\t\tif (!options.leniency) {\r\n\t\t\tthrow new TypeError('`Leniency` not supplied')\r\n\t\t}\r\n\r\n\t\tif (options.maxTries < 0) {\r\n\t\t\tthrow new TypeError('`maxTries` not supplied')\r\n\t\t}\r\n\r\n\t\tthis.text = text\r\n\t\tthis.options = options\r\n    this.metadata = metadata\r\n\r\n\t\t/** The degree of validation requested. */\r\n\t\tthis.leniency = Leniency[options.leniency]\r\n\r\n\t\tif (!this.leniency) {\r\n\t\t\tthrow new TypeError(`Unknown leniency: ${options.leniency}.`)\r\n\t\t}\r\n\r\n\t\t/** The maximum number of retries after matching an invalid number. */\r\n\t\tthis.maxTries = options.maxTries\r\n\r\n\t\tthis.PATTERN = new RegExp(PATTERN, 'ig')\r\n\r\n\r\n    /** The iteration tristate. */\r\n    this.state = 'NOT_READY'\r\n\r\n    /** The next index to start searching at. Undefined in {@link State#DONE}. */\r\n    this.searchIndex = 0\r\n\r\n    // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\r\n    // countries being used for the same doc with ~10 patterns for each country. Some pages will have\r\n    // a lot more countries in use, but typically fewer numbers for each so expanding the cache for\r\n    // that use-case won't have a lot of benefit.\r\n    this.regExpCache = new RegExpCache(32)\r\n  }\r\n\r\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\r\n\tfind() {\r\n\t\t// // Reset the regular expression.\r\n\t\t// this.PATTERN.lastIndex = index\r\n\r\n\t\tlet matches\r\n\t\twhile ((this.maxTries > 0) && (matches = this.PATTERN.exec(this.text)) !== null) {\r\n\t\t\tlet candidate = matches[0]\r\n\t\t\tconst offset = matches.index\r\n\r\n\t\t\tcandidate = parsePreCandidate(candidate)\r\n\r\n\t\t\tif (isValidPreCandidate(candidate, offset, this.text)) {\r\n\t\t\t\tconst match =\r\n\t\t\t\t\t// Try to come up with a valid match given the entire candidate.\r\n\t\t\t\t\tthis.parseAndVerify(candidate, offset, this.text)\r\n\t\t\t\t\t// If that failed, try to find an \"inner match\" -\r\n\t\t\t\t\t// there might be a phone number within this candidate.\r\n\t\t\t\t\t|| this.extractInnerMatch(candidate, offset, this.text)\r\n\r\n\t\t\t\tif (match) {\r\n\t\t\t\t\tif (this.options.v2) {\r\n\t\t\t\t\t\tconst phoneNumber = new PhoneNumber(\r\n              match.country || match.countryCallingCode,\r\n              match.phone,\r\n              this.metadata\r\n            )\r\n\t\t\t\t\t\tif (match.ext) {\r\n\t\t\t\t\t\t\tphoneNumber.ext = match.ext\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tstartsAt: match.startsAt,\r\n\t\t\t\t\t\t\tendsAt: match.endsAt,\r\n\t\t\t\t\t\t\tnumber: phoneNumber\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn match\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.maxTries--\r\n\t\t}\r\n\t}\r\n\r\n  /**\r\n   * Attempts to extract a match from `substring`\r\n   * if the substring itself does not qualify as a match.\r\n   */\r\n  extractInnerMatch(substring, offset, text) {\r\n    for (const innerMatchPattern of INNER_MATCHES) {\r\n      let isFirstMatch = true\r\n      let candidateMatch\r\n      const innerMatchRegExp = new RegExp(innerMatchPattern, 'g')\r\n      while (this.maxTries > 0 && (candidateMatch = innerMatchRegExp.exec(substring)) !== null) {\r\n        if (isFirstMatch) {\r\n          // We should handle any group before this one too.\r\n          const candidate = trimAfterFirstMatch(\r\n            UNWANTED_END_CHAR_PATTERN,\r\n            substring.slice(0, candidateMatch.index)\r\n          )\r\n\r\n          const match = this.parseAndVerify(candidate, offset, text)\r\n\r\n          if (match) {\r\n            return match\r\n          }\r\n\r\n          this.maxTries--\r\n          isFirstMatch = false\r\n        }\r\n\r\n        const candidate = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, candidateMatch[1])\r\n\r\n        // Java code does `groupMatcher.start(1)` here,\r\n        // but there's no way in javascript to get a `candidate` start index,\r\n        // therefore resort to using this kind of an approximation.\r\n        // (`groupMatcher` is called `candidateInSubstringMatch` in this javascript port)\r\n        // https://stackoverflow.com/questions/15934353/get-index-of-each-capture-in-a-javascript-regex\r\n        const candidateIndexGuess = substring.indexOf(candidate, candidateMatch.index)\r\n\r\n        const match = this.parseAndVerify(candidate, offset + candidateIndexGuess, text)\r\n        if (match) {\r\n          return match\r\n        }\r\n\r\n        this.maxTries--\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses a phone number from the `candidate` using `parseNumber` and\r\n   * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n   * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n   *\r\n   * @param candidate  the candidate match\r\n   * @param offset  the offset of {@code candidate} within {@link #text}\r\n   * @return  the parsed and validated phone number match, or null\r\n   */\r\n  parseAndVerify(candidate, offset, text) {\r\n    if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\r\n      return\r\n  \t}\r\n\r\n    const number = parseNumber(\r\n      candidate, {\r\n        extended: true,\r\n        defaultCountry: this.options.defaultCountry,\r\n        defaultCallingCode: this.options.defaultCallingCode\r\n      },\r\n      this.metadata\r\n    )\r\n\r\n    if (!number.possible) {\r\n      return\r\n    }\r\n\r\n    if (this.leniency(number, candidate, this.metadata, this.regExpCache)) {\r\n      // // We used parseAndKeepRawInput to create this number,\r\n      // // but for now we don't return the extra values parsed.\r\n      // // TODO: stop clearing all values here and switch all users over\r\n      // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\r\n      // number.clearCountryCodeSource()\r\n      // number.clearRawInput()\r\n      // number.clearPreferredDomesticCarrierCode()\r\n\r\n      const result = {\r\n        startsAt: offset,\r\n        endsAt: offset + candidate.length,\r\n        phone: number.phone\r\n      }\r\n\r\n      if (number.country && number.country !== '001') {\r\n        result.country = number.country\r\n      } else {\r\n        result.countryCallingCode = number.countryCallingCode\r\n      }\r\n\r\n      if (number.ext) {\r\n        result.ext = number.ext\r\n      }\r\n\r\n      return result\r\n    }\r\n  }\r\n\r\n  hasNext()\r\n  {\r\n    if (this.state === 'NOT_READY')\r\n    {\r\n      this.lastMatch = this.find() // (this.searchIndex)\r\n\r\n      if (this.lastMatch)\r\n      {\r\n        // this.searchIndex = this.lastMatch.endsAt\r\n        this.state = 'READY'\r\n      }\r\n      else\r\n      {\r\n        this.state = 'DONE'\r\n      }\r\n    }\r\n\r\n    return this.state === 'READY'\r\n  }\r\n\r\n  next()\r\n  {\r\n    // Check the state and find the next match as a side-effect if necessary.\r\n    if (!this.hasNext())\r\n    {\r\n      throw new Error('No next element')\r\n    }\r\n\r\n    // Don't retain that memory any longer than necessary.\r\n    const result = this.lastMatch\r\n    this.lastMatch = null\r\n    this.state = 'NOT_READY'\r\n    return result\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}