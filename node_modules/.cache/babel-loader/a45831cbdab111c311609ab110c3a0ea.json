{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nvar AsYouTypeState = /*#__PURE__*/function () {\n  function AsYouTypeState(_ref) {\n    var onCountryChange = _ref.onCountryChange,\n      onCallingCodeChange = _ref.onCallingCodeChange;\n    _classCallCheck(this, AsYouTypeState);\n    this.onCountryChange = onCountryChange;\n    this.onCallingCodeChange = onCallingCodeChange;\n  }\n  _createClass(AsYouTypeState, [{\n    key: \"reset\",\n    value: function reset(defaultCountry, defaultCallingCode) {\n      this.international = false;\n      this.IDDPrefix = undefined;\n      this.missingPlus = undefined;\n      this.callingCode = undefined;\n      this.digits = '';\n      this.resetNationalSignificantNumber();\n      this.initCountryAndCallingCode(defaultCountry, defaultCallingCode);\n    }\n  }, {\n    key: \"resetNationalSignificantNumber\",\n    value: function resetNationalSignificantNumber() {\n      this.nationalSignificantNumber = this.getNationalDigits();\n      this.nationalSignificantNumberMatchesInput = true;\n      this.nationalPrefix = undefined;\n      this.carrierCode = undefined;\n      this.complexPrefixBeforeNationalSignificantNumber = undefined;\n    }\n  }, {\n    key: \"update\",\n    value: function update(properties) {\n      for (var _i = 0, _Object$keys = Object.keys(properties); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        this[key] = properties[key];\n      }\n    }\n  }, {\n    key: \"initCountryAndCallingCode\",\n    value: function initCountryAndCallingCode(country, callingCode) {\n      this.setCountry(country);\n      this.setCallingCode(callingCode);\n    }\n  }, {\n    key: \"setCountry\",\n    value: function setCountry(country) {\n      this.country = country;\n      this.onCountryChange(country);\n    }\n  }, {\n    key: \"setCallingCode\",\n    value: function setCallingCode(callingCode) {\n      this.callingCode = callingCode;\n      this.onCallingCodeChange(callingCode, this.country);\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber(country, callingCode) {\n      // Prepend the `+` to parsed input.\n      this.international = true; // If a default country was set then reset it\n      // because an explicitly international phone\n      // number is being entered.\n\n      this.initCountryAndCallingCode(country, callingCode);\n    }\n  }, {\n    key: \"appendDigits\",\n    value: function appendDigits(nextDigits) {\n      this.digits += nextDigits;\n    }\n  }, {\n    key: \"appendNationalSignificantNumberDigits\",\n    value: function appendNationalSignificantNumberDigits(nextDigits) {\n      this.nationalSignificantNumber += nextDigits;\n    }\n    /**\r\n     * Returns the part of `this.digits` that corresponds to the national number.\r\n     * Basically, all digits that have been input by the user, except for the\r\n     * international prefix and the country calling code part\r\n     * (if the number is an international one).\r\n     * @return {string}\r\n     */\n  }, {\n    key: \"getNationalDigits\",\n    value: function getNationalDigits() {\n      if (this.international) {\n        return this.digits.slice((this.IDDPrefix ? this.IDDPrefix.length : 0) + (this.callingCode ? this.callingCode.length : 0));\n      }\n      return this.digits;\n    }\n  }, {\n    key: \"getDigitsWithoutInternationalPrefix\",\n    value: function getDigitsWithoutInternationalPrefix() {\n      if (this.international) {\n        if (this.IDDPrefix) {\n          return this.digits.slice(this.IDDPrefix.length);\n        }\n      }\n      return this.digits;\n    }\n  }]);\n  return AsYouTypeState;\n}();\nexport { AsYouTypeState as default };","map":{"version":3,"sources":["../source/AsYouTypeState.js"],"names":["AsYouTypeState","onCountryChange","onCallingCodeChange","defaultCountry","defaultCallingCode","international","IDDPrefix","undefined","missingPlus","callingCode","digits","resetNationalSignificantNumber","initCountryAndCallingCode","nationalSignificantNumber","getNationalDigits","nationalSignificantNumberMatchesInput","nationalPrefix","carrierCode","complexPrefixBeforeNationalSignificantNumber","properties","key","Object","keys","country","setCountry","setCallingCode","nextDigits","slice","length"],"mappings":"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","sourcesContent":["export default class AsYouTypeState {\r\n\tconstructor({ onCountryChange, onCallingCodeChange }) {\r\n\t\tthis.onCountryChange = onCountryChange\r\n\t\tthis.onCallingCodeChange = onCallingCodeChange\r\n\t}\r\n\r\n\treset(defaultCountry, defaultCallingCode) {\r\n\t\tthis.international = false\r\n\t\tthis.IDDPrefix = undefined\r\n\t\tthis.missingPlus = undefined\r\n\t\tthis.callingCode = undefined\r\n\t\tthis.digits = ''\r\n\t\tthis.resetNationalSignificantNumber()\r\n\t\tthis.initCountryAndCallingCode(defaultCountry, defaultCallingCode)\r\n\t}\r\n\r\n\tresetNationalSignificantNumber() {\r\n\t\tthis.nationalSignificantNumber = this.getNationalDigits()\r\n\t\tthis.nationalSignificantNumberMatchesInput = true\r\n\t\tthis.nationalPrefix = undefined\r\n\t\tthis.carrierCode = undefined\r\n\t\tthis.complexPrefixBeforeNationalSignificantNumber = undefined\r\n\t}\r\n\r\n\tupdate(properties) {\r\n\t\tfor (const key of Object.keys(properties)) {\r\n\t\t\tthis[key] = properties[key]\r\n\t\t}\r\n\t}\r\n\r\n\tinitCountryAndCallingCode(country, callingCode) {\r\n\t\tthis.setCountry(country)\r\n\t\tthis.setCallingCode(callingCode)\r\n\t}\r\n\r\n\tsetCountry(country) {\r\n\t\tthis.country = country\r\n\t\tthis.onCountryChange(country)\r\n\t}\r\n\r\n\tsetCallingCode(callingCode) {\r\n\t\tthis.callingCode = callingCode\r\n\t\tthis.onCallingCodeChange(callingCode, this.country)\r\n\t}\r\n\r\n\tstartInternationalNumber(country, callingCode) {\r\n\t\t// Prepend the `+` to parsed input.\r\n\t\tthis.international = true\r\n\t\t// If a default country was set then reset it\r\n\t\t// because an explicitly international phone\r\n\t\t// number is being entered.\r\n\t\tthis.initCountryAndCallingCode(country, callingCode)\r\n\t}\r\n\r\n\tappendDigits(nextDigits) {\r\n\t\tthis.digits += nextDigits\r\n\t}\r\n\r\n\tappendNationalSignificantNumberDigits(nextDigits) {\r\n\t\tthis.nationalSignificantNumber += nextDigits\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the part of `this.digits` that corresponds to the national number.\r\n\t * Basically, all digits that have been input by the user, except for the\r\n\t * international prefix and the country calling code part\r\n\t * (if the number is an international one).\r\n\t * @return {string}\r\n\t */\r\n\tgetNationalDigits() {\r\n\t\tif (this.international) {\r\n\t\t\treturn this.digits.slice(\r\n\t\t\t\t(this.IDDPrefix ? this.IDDPrefix.length : 0) +\r\n\t\t\t\t(this.callingCode ? this.callingCode.length : 0)\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn this.digits\r\n\t}\r\n\r\n\tgetDigitsWithoutInternationalPrefix() {\r\n\t\tif (this.international) {\r\n\t\t\tif (this.IDDPrefix) {\r\n\t\t\t\treturn this.digits.slice(this.IDDPrefix.length)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.digits\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}