{"ast":null,"code":"var _jsxFileName = \"/home/siddharthprajapati/Desktop/youtube-react-form/src/App.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./app.css\";\nimport FormInput from \"./components/FormInput\";\nimport \"./components/formInput.css\";\n// import { useFormik } from \"formik\";\nimport { Country, State, City } from 'country-state-city';\n// import Select from \"react-select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Select(_ref) {\n  let {\n    options,\n    value,\n    title,\n    handleSelectChange\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    name: \"title\",\n    value: value ? value : '',\n    onChange: handleSelectChange,\n    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n      value: \"\",\n      disabled: true,\n      selected: true,\n      hidden: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: option.id,\n      children: option.name\n    }, option.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n}\n_c = Select;\nconst App = () => {\n  _s();\n  console.log(Country.getCountryByCode(\"IN\"));\n  console.log(State.getStatesOfCountry(\"IN\"));\n  const [inputValue, setInputValue] = useState({\n    uame: \"\",\n    email: \"\",\n    mobileno: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  });\n  const inputs = [{\n    id: 1,\n    name: \"name\",\n    type: \"text\",\n    placeholder: \"Name\",\n    errorMessage: \"Name should be 3-16 characters and shouldn't include any special character!\",\n    label: \"Name\",\n    pattern: \"^[A-Za-z0-9]{3,16}$\",\n    required: true\n  }, {\n    id: 2,\n    name: \"email\",\n    type: \"email\",\n    placeholder: \"Email\",\n    errorMessage: \"It should be a valid email address!\",\n    label: \"Email\",\n    required: true\n  }, {\n    id: 3,\n    name: \"mobileno\",\n    type: \"tel\",\n    placeholder: \"Mobile No.\",\n    label: \"Mobile No\"\n  }, {\n    id: 4,\n    name: \"password\",\n    type: \"password\",\n    placeholder: \"Password\",\n    errorMessage: \"Password should be 8-20 characters and include at least 1 letter, 1 number and 1 special character!\",\n    label: \"Password\",\n    pattern: `^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,20}$`,\n    required: true\n  }, {\n    id: 5,\n    name: \"confirmPassword\",\n    type: \"password\",\n    placeholder: \"Confirm Password\",\n    errorMessage: \"Passwords don't match!\",\n    label: \"Confirm Password\",\n    pattern: inputValue.password,\n    required: true\n  }];\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(\"Submitted\");\n  };\n  const onChange = e => {\n    setInputValue({\n      ...inputValue,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  // const addressFromik = useFormik({\n  //   initialValues: {\n  //     country: \"India\",\n  //     state: null,\n  //     city: null\n  //   },\n  //   onSubmit: (values) => console.log(JSON.stringify(values))\n  // });\n\n  // const countries = Country.getAllCountries();\n\n  // const updatedCountries = countries.map((country) => ({\n  //   label: country.name,\n  //   value: country.id,\n  //   ...country\n  // }));\n\n  // const updatedStates = (countryId) =>\n  //   State\n  //     .getStatesOfCountry(countryId)\n  //     .map((state) => ({ label: state.name, value: state.id, ...state }));\n\n  // const updatedCities = (stateId) =>\n  //   City\n  //     .getCitiesOfState(stateId)\n  //     .map((city) => ({ label: city.name, value: city.id, ...city }));\n\n  // const { values, setFieldValue, setValues } = addressFromik;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), inputs.map(input => /*#__PURE__*/_jsxDEV(FormInput, {\n        ...input,\n        value: inputValue[input.name],\n        onChange: onChange\n      }, input.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Country\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        id: \"country\",\n        name: \"country\",\n        label: \"country\",\n        options: updatedCountries,\n        value: values.country,\n        onChange: value => {\n          setValues({\n            country: value,\n            state: null,\n            city: null\n          }, false);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"State\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        id: \"state\",\n        name: \"state\",\n        options: updatedStates(values.country),\n        value: values.state,\n        onChange: value => {\n          setValues({\n            state: value,\n            city: null\n          }, false);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        id: \"city\",\n        name: \"city\",\n        options: updatedCities(values.state ? values.state.value : null),\n        value: values.city,\n        onChange: value => setFieldValue(\"city\", value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"T64DSsTAIqMaT267ZXNdxaALK88=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Select\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["useState","FormInput","Country","State","City","Select","options","value","title","handleSelectChange","map","option","id","name","App","console","log","getCountryByCode","getStatesOfCountry","inputValue","setInputValue","uame","email","mobileno","password","confirmPassword","inputs","type","placeholder","errorMessage","label","pattern","required","handleSubmit","e","preventDefault","onChange","target","input","updatedCountries","values","country","setValues","state","city","updatedStates","updatedCities","setFieldValue"],"sources":["/home/siddharthprajapati/Desktop/youtube-react-form/src/App.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport \"./app.css\";\nimport FormInput from \"./components/FormInput\";\nimport \"./components/formInput.css\"\n// import { useFormik } from \"formik\";\nimport { Country, State, City } from 'country-state-city';\n// import Select from \"react-select\";\n\n\nfunction Select({ options, value, title, handleSelectChange }) {\n\n  return (\n    <select name=\"title\" value={value ? value : ''} onChange={handleSelectChange} >\n      <option value=\"\" disabled selected hidden>{title}</option>\n      {options.map(option =>\n        <option key={option.id} value={option.id}  >\n          {option.name}\n        </option>\n      )}\n    </select>\n  )\n}\n\nconst App = () => {\n\n\n\n\n  console.log(Country.getCountryByCode(\"IN\"))\n  console.log(State.getStatesOfCountry(\"IN\"))\n  const [inputValue, setInputValue] = useState({\n    uame: \"\",\n    email: \"\",\n    mobileno: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n\n  const inputs = [\n    {\n      id: 1,\n      name: \"name\",\n      type: \"text\",\n      placeholder: \"Name\",\n      errorMessage:\n        \"Name should be 3-16 characters and shouldn't include any special character!\",\n      label: \"Name\",\n      pattern: \"^[A-Za-z0-9]{3,16}$\",\n      required: true,\n    },\n    {\n      id: 2,\n      name: \"email\",\n      type: \"email\",\n      placeholder: \"Email\",\n      errorMessage: \"It should be a valid email address!\",\n      label: \"Email\",\n      required: true,\n    },\n    {\n      id: 3,\n      name: \"mobileno\",\n      type: \"tel\",\n      placeholder: \"Mobile No.\",\n      label: \"Mobile No\",\n    },\n    {\n      id: 4,\n      name: \"password\",\n      type: \"password\",\n      placeholder: \"Password\",\n      errorMessage:\n        \"Password should be 8-20 characters and include at least 1 letter, 1 number and 1 special character!\",\n      label: \"Password\",\n      pattern: `^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,20}$`,\n      required: true,\n    },\n    {\n      id: 5,\n      name: \"confirmPassword\",\n      type: \"password\",\n      placeholder: \"Confirm Password\",\n      errorMessage: \"Passwords don't match!\",\n      label: \"Confirm Password\",\n      pattern: inputValue.password,\n      required: true,\n    },\n  ];\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"Submitted\");\n  };\n\n  const onChange = (e) => {\n    setInputValue({ ...inputValue, [e.target.name]: e.target.value });\n  };\n\n  // const addressFromik = useFormik({\n  //   initialValues: {\n  //     country: \"India\",\n  //     state: null,\n  //     city: null\n  //   },\n  //   onSubmit: (values) => console.log(JSON.stringify(values))\n  // });\n\n  // const countries = Country.getAllCountries();\n\n  // const updatedCountries = countries.map((country) => ({\n  //   label: country.name,\n  //   value: country.id,\n  //   ...country\n  // }));\n\n  // const updatedStates = (countryId) =>\n  //   State\n  //     .getStatesOfCountry(countryId)\n  //     .map((state) => ({ label: state.name, value: state.id, ...state }));\n\n  // const updatedCities = (stateId) =>\n  //   City\n  //     .getCitiesOfState(stateId)\n  //     .map((city) => ({ label: city.name, value: city.id, ...city }));\n\n  // const { values, setFieldValue, setValues } = addressFromik;\n\n  return (\n    <div className=\"app\">\n      <form onSubmit={handleSubmit}>\n        <h1>Register</h1>\n        {inputs.map((input) => (\n          <FormInput\n            key={input.id}\n            {...input}\n            value={inputValue[input.name]}\n            onChange={onChange}\n          />\n        ))}\n        <label>Country</label>\n        <Select\n          id=\"country\"\n          name=\"country\"\n          label=\"country\"\n          options={updatedCountries}\n          value={values.country}\n\n          onChange={(value) => {\n            setValues({ country: value, state: null, city: null }, false);\n          }}\n        />\n        <label>State</label>\n        <Select\n          id=\"state\"\n          name=\"state\"\n          options={updatedStates(values.country)}\n          value={values.state}\n          onChange={(value) => {\n            setValues({ state: value, city: null }, false);\n          }}\n        />\n        <label>City</label>\n        <Select\n          id=\"city\"\n          name=\"city\"\n          options={updatedCities(values.state ? values.state.value : null)}\n          value={values.city}\n          onChange={(value) => setFieldValue(\"city\", value)}\n        />\n        <button>Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}